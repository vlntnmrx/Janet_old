
//Der alte Lernalghorithmus:

void learn(network netz, double[] exp) {
        double delta, d2, d3;
        for (int i = 0; i < weights.length; i++) {
            delta = 1;
            //Befinden wir uns im AusgabeLayer?
            //Dann muss nur ein Teil der Fehlerfunktion ber端cksichtigt werden
            if (this.layerId == netz.lays.length - 1) {
                delta = (netz.lr * (exp[this.id] - this.value)) * sigdiff(this.value) * netz.lays[netz.lays.length - 2].net[i].value;
            }
            //Befinden wir uns im vorletzten Layer?
            //Dann muss von jedem Teil nur das Element ber端cksichtigt werden, das auf das Ziel zeigt
            if (this.layerId == netz.lays.length - 2) {
                delta = 0;
                for (int u = 0; u < netz.lays[netz.lays.length - 1].net.length; u++) {
                    d2 = netz.lr * (exp[u] - netz.lays[netz.lays.length - 1].net[u].value) * (netz.lays[netz.lays.length - 1].net[u].weights[this.id] * sigdiff(this.value) * netz.lays[netz.lays.length - 3].net[i].value);
                    delta = delta + d2;
                }
            }
            //Befinden wir uns im dritten Layer?
            if (this.layerId < netz.lays.length - 2) {
                delta = 0;
                for (int u = 0; u < netz.lays[netz.lays.length - 1].net.length; u++) {
                    d2 = netz.lr * (exp[u] - this.value) * sigdiff(this.value);
                    d3 = 0;
                    for (int o = 0; o < netz.lays[netz.lays.length - 2].net.length; o++) {
                        d3 += netz.lays[netz.lays.length - 1].net[u].weights[o] * sigdiff(netz.lays[netz.lays.length - 2].net[o].value) * netz.lays[netz.lays.length - 2].net[o].weights[this.id] * sigdiff(this.value) * netz.lays[this.layerId - 1].net[i].value;
                    }
                    delta += d2 * d3;
                }
            }
            weights[i] -= delta;
        }

        //Bias anpassen?!
        delta = 1;
        //Befinden wir uns im AusgabeLayer?
        //Dann muss nur ein Teil der Fehlerfunktion ber端cksichtigt werden
        if (this.layerId == netz.lays.length - 1) {
            delta = (netz.lr * (exp[this.id] - this.value)) * sigdiff(this.value);
        }
        //Befinden wir uns im vorletzten Layer?
        //Dann muss von jedem Teil nur das Element ber端cksichtigt werden, das auf das Ziel zeigt
        if (this.layerId == netz.lays.length - 2) {
            delta = 0;
            for (int u = 0; u < netz.lays[netz.lays.length - 1].net.length; u++) {
                d2 = netz.lr * (exp[u] - netz.lays[netz.lays.length - 1].net[u].value) * (netz.lays[netz.lays.length - 1].net[u].weights[this.id] * sigdiff(this.value));
                delta = delta + d2;
            }
        }
        //Befinden wir uns im dritten Layer?
        if (this.layerId < netz.lays.length - 2) {
            delta = 0;
            for (int u = 0; u < netz.lays[netz.lays.length - 1].net.length; u++) {
                d2 = netz.lr * (exp[u] - this.value) * sigdiff(this.value);
                d3 = 0;
                for (int o = 0; o < netz.lays[netz.lays.length - 2].net.length; o++) {
                    d3 += netz.lays[netz.lays.length - 1].net[u].weights[o] * sigdiff(netz.lays[netz.lays.length - 2].net[o].value) * netz.lays[netz.lays.length - 2].net[o].weights[this.id] * sigdiff(this.value);
                }
                delta += d2 * d3;
            }
        }
        bias -= delta;
    }
